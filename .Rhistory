ISOdatetime(hour=floor(135/100),min=135/100-floor(135/100))
ISOdatetime(hour=floor(135/100),min=135/100-floor(135/100),year=2009)
format("11:30")
class(format("11:30"))
strftime("11:30")
strptime("11:30")
?as.Date
?as.Time
aveStepsInt$time <- paste(floor(aveStepsInt$interval/100),"54",sep=":")
head(aveStepsInt)
aveStepsInt$time <- paste(floor(aveStepsInt$interval/100),mod(aveStepsInt$interval/100),sep=":")
?rem
?modulus
aveStepsInt$time <- paste(floor(aveStepsInt$interval/100),mod(aveStepsInt$interval\100),sep=":")
5%2
5%/%2
5%%2
28%%2
29%%2
aveStepsInt$time <- paste(floor(aveStepsInt$interval/100),aveStepsInt$interval %% 100,sep=":")
head(aveStepsInt)
head(aveStepsInt,25)
strftime(x=aveStepsInt$time)
str(aveStepsInt)
as.POSIXct(aveStepsInt$time,format="%H:%M")
class(as.POSIXct(aveStepsInt$time,format="%H:%M"))
as.Time(as.POSIXct(aveStepsInt$time,format="%H:%M"))
as.time(as.POSIXct(aveStepsInt$time,format="%H:%M"))
aveSteps$time$sec
aveStepsInt$time$sec
aveStepsInt$time
class(aveStepsInt$time)
class(as.POSIXct(aveStepsInt$time,format="%H:%M"))
aveStepsInt$time <- class(as.POSIXct(aveStepsInt$time,format="%H:%M"))
aveStepsInt$time <- as.POSIXct(aveStepsInt$time,format="%H:%M")
class(aveStepsInt$time)
dim(aveStepsInt$time)
length(aveStepsInt$time)
aveStepsInt[1,1]$sec
class(aveStepsInt[1,1])
class(aveStepsInt[1,4])
str(aveStepsInt[1,4])
str(aveStepsInt[100,4])
str(aveStepsInt[105,4])
aveStepsInt[105,4]
aveStepsInt[250,4]
aveStepsInt[288,4]
head(aveStepsInt)
summary(aveStepsInt)
aveStepsInt$time <- paste(floor(aveStepsInt$interval/100),aveStepsInt$interval %% 100,sep=":")
summary(aveStepsInt)
aveStepsInt$time <- as.POSIXct(aveStepsInt$time,format="%H:%M")
summary(aveStepsInt)
head(aveStepsInt,25)
tail(aveStepsInt,25)
?format
aveStepsInt[100,4]
aveStepsInt[100,]
aveStepsInt[100,3]
aveStepsInt[100,3]$sec
unclass(aveStepsInt[100,3])
unlist(aveStepsInt[100,3])
class(aveStepsInt[100,3])
aveStepsInt$time
format(aveStepsInt$time,"%H:%M")
class(format(aveStepsInt$time,"%H:%M"))
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l")
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l",xlab="Time Interval (24-hour format)",ylab="Steps",main="Average Number of Steps by Time of Day")
max(aveStepsInt$steps)
summary(aveStepsInt$steps)
which(max(aveStepsInt$steps))
aveStepsInt[which(max(aveStepsInt$steps)),]
aveStepsInt[which(aveStepsInt$steps=max(aveStepsInt$steps)),]
aveStepsInt$steps=max(aveStepsInt$steps)
aveStepsInt <- as.data.frame(aggregate(steps ~ interval, data = activity,FUN = mean))
aveStepsInt$time <- paste(floor(aveStepsInt$interval/100),aveStepsInt$interval %% 100,sep=":")
aveStepsInt$time <- as.POSIXct(aveStepsInt$time,format="%H:%M")
aveStepsInt$time <- format(aveStepsInt$time,"%H:%M")
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l",xlab="Time Interval (24-hour format)",ylab="Steps",main="Average Number of Steps by Time of Day")
aveStepsInt$time
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l",xlab="Time Interval (24-hour format)",ylab="Steps",main="Average Number of Steps by Time of Day")
head(aveStepsInt)
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l",xlab="Time Interval (24-hour format)",ylab="Steps",main="Average Number of Steps by Time of Day")
plot(x=aveStepsInt$time,y=aveStepsInt$steps)
head(aveStepsInt)
summary(aveStepsInt)
plot(x=aveStepsInt$time,y=aveStepsInt$steps)
aveStepsInt$steps
aveStepsInt$time
plot(x=aveStepsInt$time,y=aveStepsInt$steps)
summary(aveStepsInt)
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l")
class(aveStepsInt$time)
aveStepsInt <- as.data.frame(aggregate(steps ~ interval, data = activity,FUN = mean))
aveStepsInt$time <- paste(floor(aveStepsInt$interval/100),aveStepsInt$interval %% 100,sep=":")
aveStepsInt$time <- as.POSIXct(aveStepsInt$time,format="%H:%M")
aveStepsInt$time <- format(aveStepsInt$time,"%H:%M")
head(aveStepsInt)
str(aveStepsInt)
plot(x=aveStepsInt$steps,y=aveStepsInt$interval)
plot(y=aveStepsInt$steps,x=aveStepsInt$interval)
plot(y=aveStepsInt$steps,x=aveStepsInt$interval,type="l")
plot(y=aveStepsInt$steps,x=aveStepsInt$time,type="l")
aveStepsInt$time <- paste(floor(aveStepsInt$interval/100),aveStepsInt$interval %% 100,sep=":")
aveStepsInt$time <- as.POSIXct(aveStepsInt$time,format="%H:%M")
plot(y=aveStepsInt$steps,x=aveStepsInt$time,type="l")
head(aveStepsInt)
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l",xlab="Time Interval (24-hour format)",ylab="Steps",main="Average Number of Steps by Time of Day")
max(aveStepsInt$steps)
aveStepsInt[aveStepsInt$steps = max(aveStepsInt$steps),]
aveStepsInt[aveStepsInt$steps is max(aveStepsInt$steps),]
?where
?which
aveStepsInt[aveStepsInt$steps == max(aveStepsInt$steps),]
aveStepsInt[aveStepsInt$steps == max(aveStepsInt$steps),3]
format(aveStepsInt[aveStepsInt$steps == max(aveStepsInt$steps),3],"H:M")
aveStepsInt[aveStepsInt$steps == max(aveStepsInt$steps),3]
format(aveStepsInt[aveStepsInt$steps == max(aveStepsInt$steps),3],"%H:%M")
q()
mean(daySteps)
mean(daySteps);
mean(daySteps):
The median number of steps taken per day is `r round(median(daySteps),2)` steps.  The mean number of steps taken per day is `r round(mean(daySteps),2)` steps.
round(mean(daySteps),2)
round(median(daySteps),2)
median(daySteps)
mean(daySteps)
is.na(daySteps)
is.na(activity)
table(is.na(activity))
50400+2304
3*17568
table(is.na(activity[,]))
str(activity)
summary(activity$date)
is.na(activity$date)
table(is.na(activity$date))
str(activity)
table(is.na(activity$steps))
table(is.na(activity$interval))
table(is.na(activity))
table(is.na(rowsum(activity)))
table(is.na(rowsum(activity))
table(is.na(rowsums(activity)))
table(is.na(rowSums(activity)))
table(is.na(activity))
table(is.na(activity))
table(is.na(activity))
is.na(activity)
table(is.na(activity))
table(is.na(activity$steps))
rowSums(activity[1,])
rowSums(is.na(activity[1,]))
rowSums(is.na(activity[1:3,]))
rowSums(is.na(activity[1:3,])>0)
rowSums(is.na(activity[1:500,])>0)
table(is.na(activity))
rowSums(is.na(activity[1:200,])>0)
table(rowSums(is.na(activity[1:200,])>0))
table(rowSums(is.na(activity[1:500,])>0))
table(rowSums(is.na(activity)>0))
?table
table(rowSums(is.na(activity)>0),responseName=c("NonEmpty","Contains NA"))
table(rowSums(is.na(activity)>0),dnn=c("NonEmpty","Contains NA"))
table(x=rowSums(is.na(activity)>0),dnn=c("NonEmpty","Contains NA"))
table(x=rowSums(is.na(activity)>0),row.names=c("NonEmpty","Contains NA"))
table(rowSums(is.na(activity)>0))
rowSums(is.na(activity)>0)
sum(rowSums(is.na(activity)>0))
q()
?apply
?aggregate
aggregate(activity$steps,by=interval,FUN='mean')
aggregate(x=activity,steps~interval,FUN='mean')
str(activity)
aggregate(x=activity,steps~date,FUN='mean')
aggregate(data=activity,steps~date,FUN='mean')
summary(activity)
aggDate <- aggregate(data=activity,steps~date,FUN='mean')
aggInterval <- aggregate(data=activity,steps~interval,FUN='mean')
summary(aggDate)
dim(aggDate)
head(activity)
head(activity,25)
head(activity,100)
head(activity,200)
head(activity,300)
dim(levels(activity$date))
length(levels(activity$date))
tail(activity)
summary(aggDate)
tail(aggDate)
aggDate
dim(aggDate)
dim(aggInterval)
288/(24*5)
288/(24*12)
summary(aggInterval)
aggInterval[which(aggInterval$steps==0),]
?impute
?imputate
?dplyr
?mutate
??dplyr
?merge
length(aveStepsInt)
length(aveStepsInt$time)
length(aggInterval) == length(aveStepsInt)
length(aggInterval)
length(aggInterval$steps) == length(aveStepsInt$time)
str(daySteps)
summary(daySteps)
head(daySteps)
length(aggInterval$steps) == 24*60/5
length(aggDate$steps) == 31 + 30
aggInterval2 <- aggregate(data=activity,steps~interval,FUN='median')
summary(aggInterval2)
summary(aggInterval)
length(aggInterval[which(aggInterval$steps == 0)])
str(aggInterval)
dim(aggInterval[which(aggInterval$steps == 0),])
summary(aggInterval)
aggIntervalMean <- aggregate(data=activity,steps~interval,FUN='mean')
summary(aggIntervalMean)
dim(aggInterval)
dim(activity)
head(aggInterval)
head(activity)
activityMerge <- merge(x=activity,y=aggInterval, by=Interval)
activityMerge <- merge(x=activity,y=aggInterval, by=interval)
activityMerge <- merge(x=activity,y=aggInterval, by='interval')
head(activityMerge)
dim(activityMerge)
View(aggDate)
activityMergeBackup <- activityMerge
activty
activity
lm()
ls()
dim(activityMerge)
str(activityMerge)
colnames(activityMerge)
colnames(activityMerge) <- c("interval","steps.x","date","median")
colnames(activityMerge) <- c("interval","steps.Raw","date","median")
activityMerge$steps[is.na(activityMerge$steps.Raw)] <- activityMerge$median
activityMerge$steps[is.na(activityMerge$steps.Raw)] <- activityMerge$median[is.na(activityMerge$steps.Raw)]
head(activityMerge)
head(activityMerge,25)
head(activityMerge,100)
q()
head(activity)
head(activityMerge)
?merge
?reorder
?columns
?column
activityMerge[,c(5,3,1)]
head(activityMerge[,c(5,3,1)])
head(activity)
activityMerge <- activityMerge[,c(5,3,1)]
head(activityMerge)
hist(x=log(activityMerge$steps),breaks=200,main="Total Steps Taken", ylab="Days",xlab="Steps")
hist(x=log(activityMerge$steps),breaks=100,main="Total Steps Taken", ylab="Days",xlab="Steps")
hist(x=log(activityMerge$steps),breaks=50,main="Total Steps Taken", ylab="Days",xlab="Steps")
hist(x=log(activityMerge$steps),breaks=25,main="Total Steps Taken", ylab="Days",xlab="Steps")
hist(x=log(activityMerge$steps),breaks=10,main="Total Steps Taken", ylab="Days",xlab="Steps")
hist(x=activityMerge$steps,breaks=10,main="Total Steps Taken", ylab="Days",xlab="Steps")
hist(x=activityMerge$steps,breaks=50,main="Total Steps Taken", ylab="Days",xlab="Steps")
hist(x=activityMerge$steps,main="Total Steps Taken", ylab="Days",xlab="Steps")
hist(x=activityMerge$steps,breaks=500,main="Total Steps Taken", ylab="Days",xlab="Steps")
dayStepsMerge <- as.numeric(aggregate(steps ~ date, data = activityMerge,FUN = sum)[,2])
head(dayStepsMerge)
hist(dayStepsMerge,breaks=25,xlim=c(0,25000),
hist(dayStepsMerge,breaks=25,xlim=c(0,25000),main="Total Steps Taken in a Day (Some Values Imputed)",ylab="Days",xlab ="Steps")
hist(daySteps,breaks=25,xlim=c(0,25000),main="Total Steps Taken in a Day",ylab="Days",xlab ="Steps")
hist(dayStepsMerge,breaks=25,xlim=c(0,25000),main="Total Steps Taken in a Day (Some Values Imputed)",ylab="Days",xlab ="Steps")
median(daySteps)
median(dayStepsMerge)
mean(daySteps)
mean(dayStepsMerge)
head(daySteps)
head(dayStepsMerge)
dim(daySteps)
length(daySteps)
length(dayStepsMerge)
summary(daySteps)
summary(dayStepsMerge)
dayStepsMerge <- as.numeric(aggregate(steps ~ date, data = activityMerge,FUN = sum)[,2])
summary(dayStepsMerge)
---
title: "Reproducible Research Peer Assessment 1"
output: html_document
---
activity.csv is assumed to be in the working directory.  The file is read and the total steps on each recorded day is found.
```{r}
activity <- read.csv("activity.csv")
daySteps <- as.numeric(aggregate(steps ~ date, data = activity,FUN = sum)[,2])
hist(daySteps,breaks=25,xlim=c(0,25000),main="Total Steps Taken in a Day",ylab="Days",xlab ="Steps")
```
The median number of steps taken per day is `r options(scipen=999);median(daySteps)` steps.  The mean number of steps taken per day is `r round(mean(daySteps),1)` steps.
Next, we determine the average daily pattern.
```{r}
aveStepsInt <- as.data.frame(aggregate(steps ~ interval, data = activity,FUN = mean))
aveStepsInt$time <- paste(floor(aveStepsInt$interval/100),aveStepsInt$interval %% 100,sep=":")
aveStepsInt$time <- as.POSIXct(aveStepsInt$time,format="%H:%M")
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l",xlab="Time Interval (24-hour format)",
ylab="Steps",main="Average Number of Steps by Time of Day")
```
The 5-minute interval on average that contains the maximum number of steps is `r format(aveStepsInt[aveStepsInt$steps == max(aveStepsInt$steps),3],"%H:%M")` .  That is, the subjects appear to be most active in the mid-morning.
The total number of missing values in the dataset is `r sum(rowSums(is.na(activity)>0))`.
Next, find the median by both interval and date.  Median is chosen as the measure of center since it is more robust than the mean and best represents the steps taken in an average time period.
```{r}
##Find the mean for each interval and verify that all intervals are non-empty
aggInterval <- aggregate(data=activity,steps~interval,FUN='median')
length(aggInterval$steps) == length(aveStepsInt$time)
##Find the mean for each date and discover that several dates are not represented
aggDate <- aggregate(data=activity,steps~date,FUN='median')
length(aggDate$steps) == 31 + 30
```
Note, all interval time periods have at least one complete record.  Next, activityMerge is defined as a new dataset that is equal to the original dataset with the median interval data replacing the empty step values.
```{r}
activityMerge <- merge(x=activity,y=aggInterval, by='interval')
colnames(activityMerge) <- c("interval","steps.Raw","date","median")
activityMerge$steps[is.na(activityMerge$steps.Raw)] <- activityMerge$median[is.na(activityMerge$steps.Raw)]
activityMerge <- activityMerge[,c(5,3,1)]
```
Total number of steps taken each day is now found with the imputed values
```{r}
dayStepsMerge <- as.numeric(aggregate(steps ~ date, data = activityMerge,FUN = sum)[,2])
hist(dayStepsMerge,breaks=25,xlim=c(0,25000),main="Total Steps Taken in a Day (Some Values Imputed)",ylab="Days",xlab ="Steps")
```
The median number of steps taken per day is `r median(dayStepsMerge)` steps.  The mean number of steps taken per day is `r round(mean(dayStepsMerge),1)` steps.
activity <- read.csv("activity.csv")
daySteps <- as.numeric(aggregate(steps ~ date, data = activity,FUN = sum)[,2])
hist(daySteps,breaks=25,xlim=c(0,25000),main="Total Steps Taken in a Day",ylab="Days",xlab ="Steps")
aveStepsInt <- as.data.frame(aggregate(steps ~ interval, data = activity,FUN = mean))
aveStepsInt$time <- paste(floor(aveStepsInt$interval/100),aveStepsInt$interval %% 100,sep=":")
aveStepsInt$time <- as.POSIXct(aveStepsInt$time,format="%H:%M")
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l",xlab="Time Interval (24-hour format)",
ylab="Steps",main="Average Number of Steps by Time of Day")
##Find the mean for each interval and verify that all intervals are non-empty
aggInterval <- aggregate(data=activity,steps~interval,FUN='median')
length(aggInterval$steps) == length(aveStepsInt$time)
##Find the mean for each date and discover that several dates are not represented
aggDate <- aggregate(data=activity,steps~date,FUN='median')
length(aggDate$steps) == 31 + 30
activityMerge <- merge(x=activity,y=aggInterval, by='interval')
colnames(activityMerge) <- c("interval","steps.Raw","date","median")
activityMerge$steps[is.na(activityMerge$steps.Raw)] <- activityMerge$median[is.na(activityMerge$steps.Raw)]
activityMerge <- activityMerge[,c(5,3,1)]
dayStepsMerge <- as.numeric(aggregate(steps ~ date, data = activityMerge,FUN = sum)[,2])
hist(dayStepsMerge,breaks=25,xlim=c(0,25000),main="Total Steps Taken in a Day (Some Values Imputed)",ylab="Days",xlab ="Steps")
summary(daySteps)
summary(dayStepsMerge)
median(daySteps)
summary(daySteps)[3]
?summary
summary(daySteps,digits=10)[3]
summary(daySteps,digits=2)[3]
summary(daySteps,digits=1000)[3]
mean(daySteps)
mean(dayStepsMerge)
mean(dayStepsMerge)/mean(daySteps)
str(activityMerge)
weekdays(activityMerge$date)
weekdays(activity$date)
as.Date(activityMerge$date,format="%Y-%m-%d")
summary(as.Date(activityMerge$date,format="%Y-%m-%d"))
weekdays(activity$date)
weekdays(as.Date(activityMerge$date,format="%Y-%m-%d"))
weekdays(as.Date(activity$date,format="%Y-%m-%d"))
weekdays(as.Date(activityMerge$date,format="%Y-%m-%d"))
activityMerge$DOW <- weekdays(as.Date(activityMerge$date,format="%Y-%m-%d"))
head(activityMerge)
weekdays("10/1/2012")
weekdays(as.Date("10/1/2012"))
weekdays(as.Date("10/1/2012",format="%m/%d/%Y"))
weekdays(as.Date("11/23/2012",format="%m/%d/%Y"))
dim(activityMerge)
head(activityMerge)
activityMerge <- activityMerge[,c(1:3)]
head(activityMerge)
weekdays(as.Date(activityMerge$date,format="%Y-%m-%d"))
weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday"
table(weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday")
table(weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday")
4608/sum(12960,4608)
2/7
activityMerge[weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday",]
activityMerge[weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday",]
dim(activityMerge[weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday",])
dim(activityMerge)
4608/sum(4608+17568)
table(weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday")
4608/17568
4608+12960
dim(activityMerge[weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday",])
activityMerge$WeekendOrWeekday <- activityMerge[weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday"]
activityMerge$WeekendOrWeekday[weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday"]
activityMerge$WeekendOrWeekday[weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday"] <- as.factor("Weekend")
head(activityMerge)
weekdays("10/28/2012",format="%m/%d/%Y")
weekdays(as.Date("10/28/2012",format="%m/%d/%Y")
)
weekdays(as.Date("11/24/2012",format="%m/%d/%Y"))
weekdays(as.Date("11/15/2012",format="%m/%d/%Y"))
activityMerge$WeekendOrWeekday[weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday"] <- "Weekend"
head(activityMerge)
activityMerge$WeekendOrWeekday[weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Saturday" | weekdays(as.Date(activityMerge$date,format="%Y-%m-%d")) == "Sunday"] <- "Weekend"
activityMerge$WeekendOrWeekday[is.na(activityMerge$WeekendOrWeekday)] <- "Weekday"
head(activityMerge)
?xyplot
??xyplot
?lattice
require(lattice)
?xyplot
head(activityMerge)
summary(activityMerge)
xyplot(mean(steps)~interval|WeekendOrWeekday,data=activityMerge)
aveStepsIntMerge <- as.data.frame(aggregate(steps ~ interval, data = activityMerge,FUN = mean))
dim(aveStepsMerge)
dim(aveStepsIntMerge)
24*60/5
summary(aveStepsIntMerge)
aveStepsIntMerge <- as.data.frame(aggregate(steps ~ interval, data = activityMerge,FUN = mean))
aveStepsIntMerge$time <- paste(floor(aveStepsIntMerge$interval/100),aveStepsIntMerge$interval %% 100,sep=":")
summary(aveStepsIntMerge)
aveStepsIntMerge$time <- paste(floor(aveStepsIntMerge$interval/100),
aveStepsIntMerge$time <- paste(floor(aveStepsIntMerge$interval/100),aveStepsIntMerge$interval %% 100,sep=":")
xyplot(steps ~ time | WeekendOrWeekday,data=aveStepsIntMerge)
aveStepsIntMerge <- as.data.frame(aggregate(steps ~ interval + WeekendOrWeekday, data = activityMerge,FUN = mean))
summary(aveStepsIntMerge)
288*2
head(aveStepsIntMerge)
tail(aveStepsIntMerge)
aveStepsIntMerge
aveStepsIntMerge$time <- paste(floor(aveStepsIntMerge$interval/100),aveStepsIntMerge$interval %% 100,sep=":")
aveStepsIntMerge$time <- paste(floor(aveStepsIntMerge$interval/100),aveStepsIntMerge$interval %% 100,sep=":")
aveStepsIntMerge
xyplot(steps ~ time | WeekendOrWeekday,data=aveStepsIntMerge)
str(aveStepsIntMerge)
?xyplot
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge)
?xyplot
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
?xyplot
?xyplot
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",xlab=time)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",xlab=aveStepsIntMerge$time)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",xlab=time)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",xlab="Blank")
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
?xyplot
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",xlim=time)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",xlab=time)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
xyplot(steps ~ time | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
plot(y=steps,x=interval,data=aveStepsIntMerge,type="l")
plot(x=time,y=steps,data=aveStepsIntMerge,type="l")
plot(x=aveStepsIntMerge$time,y=aveStepsIntMerge$steps,data=aveStepsIntMerge,type="l")
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l",xlab="Time Interval (24-hour format)",
ylab="Steps",main="Average Number of Steps by Time of Day")
plot(x=aveStepsInt$time,y=aveStepsInt$steps,type="l",xlab="Time Interval (24-hour format)", ylab="Steps",main="Average Number of Steps by Time of Day")
plot(x=aveStepsIntMerge$time,y=aveStepsIntMerge$steps,type="l",xlab="Time Interval (24-hour format)", ylab="Steps",main="Average Number of Steps by Time of Day")
plot(x=aveStepsIntMerge$time,y=aveStepsIntMerge$steps,type="l",xlab="Time Interval (24-hour format)", ylab="Steps",main="Average Number of Steps by Time of Day",xlim=(0,10))
plot(x=aveStepsIntMerge$time,y=aveStepsIntMerge$steps,type="l",xlab="Time Interval (24-hour format)", ylab="Steps",main="Average Number of Steps by Time of Day",xlim=c(0,10))
aveStepsIntMerge$time
aveStepsIntMerge$steps
summary(aveStepsIntMerge)
?plot
xyplot(steps ~ time | WeekendOrWeekday,data=aveStepsIntMerge)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",yscale.components=time)
require(latticeExtra)
install.Packages('latticeExtra')
install.packages('latticeExtra')
requirelatticeExtra
require9latticeExtra)
require(latticeExtra)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",yscale.components=time)
?yscale.components
?xyplot
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",scales=time)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",scales=c(time,interval))
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",scales=c(time,aveStepsIntMerge$interval))
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",scales=c(aveStepsIntMerge$time,aveStepsIntMerge$interval))
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",scales=list(time))
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",scales=list(time))
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",scales=list(interval))
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",scales=list(time))
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",scales=list(x=time))
xyplot(steps ~ as.factor(time) | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
plot(x=aveStepsIntMerge$time[aveStepsIntMerge$WeekendOrWeekday=="Weekend"],y=aveStepsIntMerge$steps,type="l",xlab="Time Interval (24-hour format)", ylab="Steps",main="Average Number of Steps by Time of Day")
plot(x=aveStepsIntMerge$time[aveStepsIntMerge$WeekendOrWeekday=="Weekend"],y=aveStepsIntMerge$steps[aveStepsIntMerge$WeekendOrWeekday=="Weekend"],type="l",xlab="Time Interval (24-hour format)", ylab="Steps",main="Average Number of Steps by Time of Day")
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
summary(aveStepsIntMerge)
xyplot(steps ~ time | WeekendOrWeekday,data=aveStepsIntMerge)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
q()
WeekendOrWeekday
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
require(lattice)
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l")
xyplot(steps ~ interval,data=aveStepsInt,type="l")
plot(x=aveStepsInt$interval,y=aveStepsInt$steps,type="l",xlab="Time Interval", ylab="Steps",main="Average Number of Steps by Time Interval")
xyplot(steps ~ interval,data=aveStepsInt,type="l")
xyplot(steps ~ interval,data=aveStepsInt,type="l",xlab="Time Interval", ylab="Steps",main="Average Number of Steps by Time Interval")
xyplot(steps ~ interval | WeekendOrWeekday,data=aveStepsIntMerge,type="l",xlab="Time Interval", ylab="Steps", main="Average Number of Steps by Time Interval (Some Values Imputated)")
q()
